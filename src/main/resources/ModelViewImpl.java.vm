#*
 * Copyright (C) 2012 Sandro Sonntag sso@adorsys.de
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *#
package ${java.basePackage}.widgets;

import java.util.ArrayList;
import java.util.Set;

import javax.validation.ConstraintViolation;

import  ${javaSource.qualifiedName};

import com.google.gwt.core.client.GWT;
import com.google.gwt.editor.client.Editor;
import com.google.gwt.editor.client.SimpleBeanEditorDriver;
import com.google.gwt.editor.ui.client.ValueBoxEditorDecorator;
import com.google.gwt.i18n.client.DateTimeFormat;
import com.google.gwt.i18n.client.DateTimeFormat.PredefinedFormat;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.IntegerBox;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.Widget;
import com.google.gwt.user.datepicker.client.DateBox;

public class ${javaSource.name}Widget extends Composite implements Editor<${javaSource.name}> {

	private static final ${javaSource.name}UiBinder UI_BINDER = GWT.create(${javaSource.name}UiBinder.class);

	private final ${javaSource.name}EditorDriver editorDriver = GWT.create(${javaSource.name}EditorDriver.class);

	interface ${javaSource.name}UiBinder extends UiBinder<Widget, ${javaSource.name}Widget> {
	}
	
	public interface ${javaSource.name}EditorDriver extends SimpleBeanEditorDriver<${javaSource.name}, ${javaSource.name}Widget> {
	}
    
    #foreach( $field in $javaSource.fields )
	@UiField
	#if ($field.primitive || $field.qualifiedType.indexOf("java.lang.") != -1)
		## Basic Type
		#if ($field.type == "int" || $field.type == "Integer")
	ValueBoxEditorDecorator<Integer> ${field.name};
		#elseif ($field.type == "long" || $field.type == "Long")
	ValueBoxEditorDecorator<Long> ${field.name};
		#elseif ($field.type == "double" || $field.type == "Double")
	ValueBoxEditorDecorator<Double> ${field.name};
		#elseif ($field.type == "String")
	ValueBoxEditorDecorator<String> ${field.name};
		#end
	#elseif ($field.qualifiedType == "java.util.Date")
	DateBox ${field.name};
	#else
	## complex Type
	${field.type}Widget ${field.name};
	#end
	#end
	
	public ${javaSource.name}Widget() {
		this(new ${javaSource.name}());
	}
	
	public ${javaSource.name}Widget(${javaSource.name} dataObject) {
		initWidget(UI_BINDER.createAndBindUi(this));
		editorDriver.initialize(this);
		editorDriver.edit(dataObject);
		
		#foreach( $field in $javaSource.fields )
			#if ($field.qualifiedType == "java.util.Date")
		${field.name}.setFormat(new DateBox.DefaultFormat(DateTimeFormat.getFormat(PredefinedFormat.DATE_SHORT)));
			#end
		#end
	}

	public ${javaSource.name}EditorDriver getEditorDriver() {
		return editorDriver;
	}
	
	public void showErrors(
			Set<ConstraintViolation<${javaSource.name}>> validate) {
		editorDriver.setConstraintViolations(new ArrayList<ConstraintViolation<?>>(validate));
	}

}