#*
 * Copyright (C) 2012 Sandro Sonntag sso@adorsys.de
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *#
package ${java.basePackage}.widgets;

import java.util.ArrayList;
import java.util.List;

import  ${javaSource.qualifiedName};

import com.google.gwt.cell.client.EditTextCell;
import com.google.gwt.cell.client.FieldUpdater;
import com.google.gwt.core.client.GWT;
import com.google.gwt.editor.client.LeafValueEditor;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.cellview.client.CellTable;
import com.google.gwt.user.cellview.client.Column;
import com.google.gwt.user.cellview.client.SimplePager;
import com.google.gwt.user.cellview.client.SimplePager.TextLocation;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Widget;
import com.google.gwt.view.client.ListDataProvider;

public class ${javaSource.name}TableWidget extends Composite implements LeafValueEditor<List<${javaSource.name}>> {
	
	private static final ${javaSource.name}ListUiBinder UI_BINDER = GWT
			.create(${javaSource.name}ListUiBinder.class);

	interface ${javaSource.name}ListUiBinder extends UiBinder<Widget, ${javaSource.name}TableWidget> {
	}
	
	private ListDataProvider<${javaSource.name}> dataProvider = new ListDataProvider<${javaSource.name}>();
	
	@Override
	public void setValue(List<${javaSource.name}> value) {
		dataProvider.setList(value);
	}
	
	@Override
	public List<${javaSource.name}> getValue() {
		dataProvider.flush();
		return new ArrayList<${javaSource.name}>(dataProvider.getList());
	}
	
	@UiField
	CellTable<${javaSource.name}> table;
	
	@UiField(provided = true)
	SimplePager pager = new SimplePager(TextLocation.CENTER, (SimplePager.Resources)GWT.create(SimplePager.Resources.class), false, 0, true);
	
	public ${javaSource.name}TableWidget() {
		initWidget(UI_BINDER.createAndBindUi(this));
		#foreach( $field in $javaSource.fields )
			#if ($field.primitive || $field.qualifiedType.indexOf("java.lang.") != -1)
		table.addColumn(new Column<${javaSource.name}, String>(new EditTextCell()) {
			{
				setFieldUpdater(new FieldUpdater<${javaSource.name}, String>() {
					@Override
					public void update(int index, ${javaSource.name} object, String value) {
			#if ($field.primitive)
						object.set${util.capitalize($field.name)}(value);
			#elseif ($field.qualifiedType.indexOf("java.lang.") != -1)
						object.set${util.capitalize($field.name)}(${field.type}.valueOf(value));
			#end
					}
				});
			}

			@Override
			public String getValue(${javaSource.name} object) {
				return String.valueOf(object.get${util.capitalize($field.name)}());
			}
			
		}, "${util.capitalize($field.name)}");
			#end
		#end
		
		dataProvider.addDataDisplay(table);
		pager.setDisplay(table);
	}

}

